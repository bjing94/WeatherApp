{"version":3,"sources":["services/WeatherService.ts","components/Header.tsx","components/WeatherCard.tsx","components/AddWeatherCard.tsx","components/CardContainer.tsx","App.tsx","index.tsx"],"names":["WeatherService","_apiKey","response","ok","Error","status","currDate","Date","utc","getTime","getTimezoneOffset","localDate","timezone","name","temperature","Math","round","main","temp","temperatureMax","temp_max","temperatureMin","temp_min","wind","speed","humidity","date","errorOccured","description","weather","cityName","a","fetch","this","then","json","statusText","jsonResponse","_transformWeather","catch","error","result","Header","toggleDarkMode","AppBar","color","Toolbar","Grid","container","justifyContent","alignItems","item","Typography","FormControlLabel","control","Switch","onClick","label","useStyles","makeStyles","theme","cardRoot","width","topBox","height","backgroundColor","palette","primary","common","white","bottomBox","bottomGrid","icon","WeatherCard","updateCity","deleteCity","classes","errorContent","Fragment","Box","className","padding","direction","spacing","variant","IconButton","size","Close","defaultContent","Refresh","display","flexDirection","WbCloudy","marginLeft","marginTop","alignContent","Card","addButton","addIcon","cardContent","AddWeatherCard","addCity","useState","showInput","setShowInput","inputEl","useRef","CardContent","style","Input","inputRef","type","placeholder","Button","current","value","Add","CardContainer","cities","elements","map","city","useTheme","matches","useMediaQuery","breakpoints","up","m","App","darkMode","setDarkMode","weatherService","setCities","createTheme","typography","h1","fontSize","h2","h3","h4","ThemeProvider","CssBaseline","getWeather","prevCities","newCities","filter","id","findIndex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e68c391.chunk.js","sourcesContent":["import { WeatherInformation } from \"../types\";\r\nexport default class WeatherService {\r\n  _apiKey: string = \"6d7f2956ed528a6da4a0b8b400e8bf4b\";\r\n\r\n  handleErrors(response:any){\r\n    if(!response.ok) throw new Error(response.status);\r\n    return response;\r\n  }\r\n\r\n  _transformWeather(response: any): WeatherInformation {\r\n    let currDate = new Date();\r\n    let utc = currDate.getTime() - currDate.getTimezoneOffset() * 60000;\r\n    let localDate = new Date(utc + response.timezone);\r\n\r\n    let result: WeatherInformation = {\r\n      name: response.name,\r\n      temperature: Math.round((response.main.temp-273.15)*10)/10,\r\n      temperatureMax:Math.round((response.main.temp_max-273.15)*10)/10,\r\n      temperatureMin:Math.round((response.main.temp_min-273.15)*10)/10,\r\n      wind: response.wind.speed,\r\n      humidity: response.main.humidity,\r\n      date: localDate,\r\n      errorOccured:false,\r\n      description:response.weather[0].description\r\n    };\r\n    return result;\r\n  }\r\n  async getWeather(cityName: string): Promise<WeatherInformation> {\r\n    const result = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${this._apiKey}`\r\n    )\r\n    .then((response)=>{\r\n        if(response.status>=200 && response.status<=299){\r\n            return response.json();\r\n        }else{\r\n           \r\n            throw new Error(response.statusText)\r\n        }\r\n\r\n    }).then((jsonResponse)=>{\r\n        return this._transformWeather(jsonResponse);\r\n    }).catch((error)=>{\r\n        const weatherNotFound: WeatherInformation = {\r\n            name: `City ${cityName} doesn't exist`,\r\n            temperature: 12,\r\n            temperatureMax:12,\r\n      temperatureMin:12,\r\n            wind: 12,\r\n            humidity: 12,\r\n            date: new Date(),\r\n            errorOccured:true,\r\n            description:'Error'\r\n          };\r\n          return weatherNotFound;\r\n    })\r\n    ;\r\n    return result;\r\n  }\r\n}\r\n","import {\r\n  AppBar,\r\n  FormControlLabel,\r\n  Grid,\r\n  Switch,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\ninterface HeaderProps{\r\n    toggleDarkMode: ()=>void;\r\n}\r\nexport default function Header({toggleDarkMode}:HeaderProps) {\r\n  return (\r\n    <div>\r\n      <AppBar color=\"default\">\r\n        <Toolbar>\r\n          <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Grid item>\r\n              <Typography>Weather APP</Typography>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n              <FormControlLabel control={<Switch onClick={toggleDarkMode}/>} label=\"Night mode\" color=\"secondary\"/>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  Card,\r\n  Grid,\r\n  Typography,\r\n  Box,\r\n  makeStyles,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport { Close, Refresh, WbCloudy } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\n\r\ninterface weatherProps {\r\n  name: string;\r\n  temperature: number;\r\n  temperatureMin: number;\r\n  temperatureMax: number;\r\n  humidity: number;\r\n  wind: number;\r\n  date: Date;\r\n  description: string;\r\n  updateCity: (cityName: string) => void;\r\n  deleteCity: (cityName: string) => void;\r\n  errorOccured: boolean;\r\n}\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardRoot: {\r\n    width: \"fit-content\",\r\n  },\r\n  topBox: {\r\n    width: \"26rem\",\r\n    height: \"16rem\",\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n  },\r\n  bottomBox: {\r\n    width: \"26rem\",\r\n    height: \"10rem\",\r\n  },\r\n  bottomGrid: {\r\n    height: \"100%\",\r\n  },\r\n  icon: {\r\n    color: theme.palette.common.white,\r\n  },\r\n}));\r\nexport default function WeatherCard({\r\n  name,\r\n  temperature,\r\n  humidity,\r\n  wind,\r\n  date,\r\n  updateCity,\r\n  deleteCity,\r\n  errorOccured,\r\n  description,\r\n  temperatureMin,\r\n  temperatureMax,\r\n}: weatherProps) {\r\n  const classes = useStyles();\r\n  const errorContent = (\r\n    <React.Fragment>\r\n      <Box className={classes.topBox} padding={2}>\r\n        <Grid container direction=\"column\">\r\n          <Grid item>\r\n            <Grid container direction=\"column\" spacing={1}>\r\n              <Grid item>\r\n                <Grid container justifyContent=\"space-between\">\r\n                  <Grid item>\r\n                    <Typography variant=\"h2\">City not found!</Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <Box alignItems=\"center\">\r\n                      <IconButton\r\n                        size=\"medium\"\r\n                        onClick={() => {\r\n                          deleteCity(name);\r\n                        }}\r\n                      >\r\n                        <Close className={classes.icon} />\r\n                      </IconButton>\r\n                    </Box>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Box className={classes.bottomBox} padding={2}></Box>\r\n    </React.Fragment>\r\n  );\r\n  const defaultContent = (\r\n    <React.Fragment>\r\n      <Box className={classes.topBox} padding={2}>\r\n        <Grid container direction=\"column\">\r\n          <Grid item>\r\n            <Grid container direction=\"column\" spacing={1}>\r\n              <Grid item>\r\n                <Grid container justifyContent=\"space-between\">\r\n                  <Grid item>\r\n                    <Typography variant=\"h2\">{name}</Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <Box alignItems=\"center\">\r\n                      <IconButton\r\n                        size=\"medium\"\r\n                        onClick={() => {\r\n                          updateCity(name);\r\n                        }}\r\n                      >\r\n                        <Refresh className={classes.icon} />\r\n                      </IconButton>\r\n                      <IconButton\r\n                        size=\"medium\"\r\n                        onClick={() => {\r\n                          deleteCity(name);\r\n                        }}\r\n                      >\r\n                        <Close className={classes.icon} />\r\n                      </IconButton>\r\n                    </Box>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid item>\r\n                <Typography variant=\"h4\">{description}</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\r\n                  <WbCloudy />\r\n                  <Box marginLeft={\"1.1rem\"}>\r\n                    <Typography variant=\"h4\">{wind} m/sec</Typography>\r\n                  </Box>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Box marginTop=\"4rem\">\r\n              <Typography variant=\"h1\">{temperature}°С</Typography>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Box className={classes.bottomBox} padding={2}>\r\n        <Grid\r\n          container\r\n          alignContent=\"center\"\r\n          justifyContent=\"space-between\"\r\n          className={classes.bottomGrid}\r\n        >\r\n          <Grid item>\r\n            <Grid container direction=\"column\" spacing={2} alignItems=\"center\">\r\n              <Grid item>\r\n                <Typography variant=\"h3\">Min</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h3\">{temperatureMin}°C</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Grid container direction=\"column\" spacing={2} alignItems=\"center\">\r\n              <Grid item>\r\n                <Typography variant=\"h3\">Max</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h3\">{temperatureMax}°C</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Grid container direction=\"column\" spacing={2} alignItems=\"center\">\r\n              <Grid item>\r\n                <Typography variant=\"h3\">Humidity</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h3\">{humidity}%</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n  return <Card className={classes.cardRoot}>\r\n    {errorOccured?errorContent:defaultContent}\r\n  </Card>;\r\n}\r\n","import {\r\n  makeStyles,\r\n  Card,\r\n  CardContent,\r\n  IconButton,\r\n  Box,\r\n  Typography,\r\n  Input,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Add } from \"@material-ui/icons\";\r\nimport React, { useState } from \"react\";\r\nimport { useRef } from \"react\";\r\n\r\ninterface addCardProps {\r\n  addCity: (cityName: string) => void;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  cardRoot: {\r\n    width: \"18rem\",\r\n    height: \"26rem\",\r\n  },\r\n  addButton: {\r\n    width: \"8rem\",\r\n    height: \"8rem\",\r\n  },\r\n  addIcon: {\r\n    width: \"4rem\",\r\n    height: \"4rem\",\r\n  },\r\n  cardContent: {\r\n    height: \"100%\",\r\n  },\r\n});\r\nexport default function AddWeatherCard({ addCity }: addCardProps) {\r\n  const classes = useStyles();\r\n  const [showInput, setShowInput] = useState(false);\r\n  const inputEl = useRef<any>();\r\n\r\n  return (\r\n    <Card className={classes.cardRoot}>\r\n      <CardContent>\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n          style={{ height: \"100%\", width: \"100%\" }}\r\n          flexDirection=\"column\"\r\n        >\r\n          {showInput && (\r\n            <React.Fragment>\r\n              <Input\r\n                inputRef={inputEl}\r\n                type=\"text\"\r\n                placeholder=\"Enter city name\"\r\n              />\r\n              <Box marginTop={2}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setShowInput(false);\r\n                    addCity(inputEl.current.value);\r\n                  }}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Box>\r\n            </React.Fragment>\r\n          )}\r\n          {!showInput && (\r\n            <React.Fragment>\r\n              <Box marginTop={\"4rem\"}>\r\n                <IconButton\r\n                  className={classes.addButton}\r\n                  onClick={() => {\r\n                    setShowInput(true);\r\n                  }}\r\n                >\r\n                  <Add className={classes.addIcon}   />\r\n                </IconButton>\r\n              </Box>\r\n              <Box marginTop={\"4rem\"}>\r\n                <Typography variant=\"h5\">Add city</Typography>\r\n              </Box>\r\n            </React.Fragment>\r\n          )}\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport WeatherCard from \"./WeatherCard\";\r\nimport { Box, Grid, Toolbar, useMediaQuery, useTheme } from \"@material-ui/core\";\r\nimport AddWeatherCard from \"./AddWeatherCard\";\r\nimport { WeatherInformation } from \"../types\";\r\ninterface cardContainerProps {\r\n  addCity: (cityName: string) => void;\r\n  updateCity: (cityName: string) => void;\r\n  deleteCity: (cityName: string) => void;\r\n  cities: WeatherInformation[];\r\n}\r\n\r\nexport default function CardContainer({\r\n  addCity,\r\n  deleteCity,\r\n  cities,\r\n  updateCity,\r\n}: cardContainerProps) {\r\n  const elements = cities.map((city) => {\r\n    return (\r\n      <Grid item>\r\n        <WeatherCard\r\n          name={city.name}\r\n          temperature={city.temperature}\r\n          temperatureMin={city.temperatureMin}\r\n          temperatureMax={city.temperatureMax}\r\n          date={city.date}\r\n          updateCity={updateCity}\r\n          deleteCity={deleteCity}\r\n          errorOccured={city.errorOccured}\r\n          description={city.description}\r\n          humidity={city.humidity}\r\n          wind={city.wind}\r\n        />\r\n      </Grid>\r\n    );\r\n  });\r\n  const theme = useTheme();\r\n  const matches = useMediaQuery(theme.breakpoints.up(\"md\"));\r\n  return (\r\n    <Box m={2}>\r\n      <Toolbar />\r\n      {matches && (\r\n        <Grid container spacing={2}>\r\n          {elements}\r\n\r\n          <Grid item>\r\n            <AddWeatherCard addCity={addCity} />\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      {!matches && (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          {elements}\r\n\r\n          <Grid item>\r\n            <AddWeatherCard addCity={addCity} />\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\nimport WeatherService from \"./services/WeatherService\";\nimport Header from \"./components/Header\";\nimport CardContainer from \"./components/CardContainer\";\nimport { useState } from \"react\";\nimport { WeatherInformation } from \"./types\";\nimport { createTheme, CssBaseline, ThemeProvider } from \"@material-ui/core\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const weatherService = new WeatherService();\n  const [cities, setCities] = useState<WeatherInformation[]>([]);\n  const theme = createTheme({\n    palette: {\n      type: darkMode ? \"dark\" : \"light\",\n    },\n    typography: {\n      h1: {\n        fontSize: \"4rem\",\n      },\n      h2: {\n        fontSize: \"2.5rem\",\n      },\n      h3: {\n        fontSize: \"1.75rem\",\n      },\n      h4: {\n        fontSize: \"1rem\",\n      },\n    },\n  });\n\n  function handleAddCity(cityName: string) {\n    weatherService.getWeather(cityName).then((weather) => {\n      const prevCities = [...cities, weather];\n      setCities(prevCities);\n    });\n  }\n  function handleDeleteCity(cityName: string) {\n    const newCities = cities.filter((city) => city.name !== cityName);\n    setCities(newCities);\n  }\n  function updateCity(cityName: string) {\n    const id = cities.findIndex((city) => city.name === cityName);\n    weatherService.getWeather(cityName).then((weather) => {\n      const newCities = [...cities];\n      newCities[id] = weather;\n      setCities(newCities);\n    });\n  }\n  function handleDarkMode(){\n    setDarkMode(!darkMode);\n  }\n  return (\n    <div>\n      <ThemeProvider theme={theme}>\n      <CssBaseline />\n        <Header toggleDarkMode={handleDarkMode} />\n        <CardContainer\n          addCity={handleAddCity}\n          deleteCity={handleDeleteCity}\n          cities={cities}\n          updateCity={updateCity}\n        />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}